import requests
import textwrap

# Gate.io API 端点
API_URL = "https://api.gateio.ws/api/v4/spot/currency_pairs"
# 输出的 Rust 文件名
OUTPUT_FILE = "../pairs/gate.rs"

def fetch_gateio_symbols():
    """从 Gate.io API 获取所有可交易的现货交易对。"""
    print(f"正在从 {API_URL} 获取交易对信息...")
    try:
        response = requests.get(API_URL, timeout=10)
        # 如果请求失败（例如 4xx 或 5xx 错误），则抛出异常
        response.raise_for_status()
        data = response.json()
        
        # 从 JSON 数据中提取 'id' 字段，并只保留 'tradable' 状态的交易对
        symbols = [
            item['id'] for item in data 
            if item.get('id') and item.get('trade_status') == 'tradable'
        ]
        
        symbols.sort() # 对列表进行排序，使输出结果稳定
        print(f"成功获取到 {len(symbols)} 个可交易的交易对。")
        return symbols
    except requests.exceptions.RequestException as e:
        print(f"错误：无法连接到 Gate.io API。 {e}")
        return None
    except KeyError as e:
        print(f"错误：API 返回的数据格式不符合预期。缺少键：{e}")
        return None

def generate_rust_code(symbols):
    """根据交易对列表生成 Rust 代码。"""
    if not symbols:
        print("没有可用的交易对来生成代码。")
        return

    print(f"正在生成 Rust 代码并写入到文件 {OUTPUT_FILE}...")

    # 构建 Rust 代码字符串
    code = f"""
// ===================================================================================
// 此文件由脚本自动生成，请勿手动修改。
//
// This file is automatically generated by a script, do not edit it manually.
//
// 数据来源 (Data source): {API_URL}
// 交易对总数 (Total symbols): {len(symbols)}
// ===================================================================================

/// 所有 Gate.io 现货交易对的静态数组 (slice)
/// A static slice containing all Gate.io spot trading symbols.
pub static ALL_GATEIO_SYMBOLS: &[&'static str] = &[\n"""

    # 为了美观，将交易对格式化为每行 5 个
    formatted_symbols = []
    for i in range(0, len(symbols), 5):
        # Gate.io 的交易对 ID 包含下划线，直接放入字符串即可
        line_symbols = [f'"{s}"' for s in symbols[i:i+5]]
        formatted_symbols.append("    " + ", ".join(line_symbols) + ",")

    code += "\n".join(formatted_symbols)
    # 移除最后一行的逗号
    if code.endswith(','):
        code = code[:-1]

    code += "\n];\n"

    # 写入文件
    try:
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            f.write(code)
        print(f"代码已成功写入 {OUTPUT_FILE}。")
    except IOError as e:
        print(f"错误：无法写入文件 {OUTPUT_FILE}。 {e}")

if __name__ == "__main__":
    symbols_list = fetch_gateio_symbols()
    if symbols_list:
        generate_rust_code(symbols_list)